ackage com.plgrnds.tests.bank.steps

import com.plgrnds.tests.bank.Account
import com.plgrnds.tests.bank.AccountRepository
import com.plgrnds.tests.bank.Bank
import com.plgrnds.tests.bank.Customer
import com.plgrnds.tests.bank.InMemoryAccountRepository
import groovy.transform.Field

import static org.assertj.core.api.Assertions.assertThat


this.metaClass.mixin(cucumber.api.groovy.EN)

@Field AccountRepository accountRepository
@Field Customer customer
@Field Bank bank

@Field newAccount


Given(~/^there is a bank$/) { ->
    accountRepository = new InMemoryAccountRepository()
    bank = new Bank(accountRepository)
}

Given(~/^balance on account  is 100$/) { ->
    customer = new Customer()
    newAccount = new Account(customer)
    newAccount.setBalance(100);

}


When(~/^customer withdrawn to this account $/) { ->
    newAccount.CashOut(90);

    Then(~/^balance on his account is 10$/) { ->
        assertThat(newAccount.getBalance).isEqualTo(10)
    }
    

